// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Data;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240914064502_SeedData2")]
    partial class SeedData2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c85c723-3740-48e0-bd85-11c01d197da4",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "fb851173-1364-4489-9fd2-01f0bf676ba1",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("api.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BuildingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityOrArea")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Governorate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NearestLandmark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("api.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("api.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Image = "http://www.pacochacartwright.biz/shop/page.asp",
                            NameAr = "Schmitt Inc and Sons",
                            NameEn = "Waelchi-Gulgowski",
                            SubCategoryId = 9
                        },
                        new
                        {
                            Id = 2,
                            Image = "http://www.lind.biz/shop/page.asp",
                            NameAr = "Bayer, Kassulke and Runolfsson",
                            NameEn = "Turner Inc and Sons",
                            SubCategoryId = 4
                        },
                        new
                        {
                            Id = 3,
                            Image = "http://www.kreiger.co.uk/shop/resource.htm",
                            NameAr = "Schulist-Dare",
                            NameEn = "Carter, Bernier and Leannon",
                            SubCategoryId = 1
                        },
                        new
                        {
                            Id = 4,
                            Image = "http://www.bednarruecker.com/interviews/applet.jsp",
                            NameAr = "Heaney, Gottlieb and O'Conner",
                            NameEn = "Stracke-Moen",
                            SubCategoryId = 8
                        },
                        new
                        {
                            Id = 5,
                            Image = "http://www.altenwerth.ca/shop/food/form.gem",
                            NameAr = "Baumbach LLC",
                            NameEn = "Stokes, Kirlin and McDermott",
                            SubCategoryId = 2
                        },
                        new
                        {
                            Id = 6,
                            Image = "http://www.nikolaus.us/shop/resource.asp",
                            NameAr = "McLaughlin, Ankunding and Maggio",
                            NameEn = "O'Hara-Mitchell",
                            SubCategoryId = 9
                        },
                        new
                        {
                            Id = 7,
                            Image = "http://www.rodriguezwuckert.name/home/index.gem",
                            NameAr = "Crooks, Denesik and Jerde",
                            NameEn = "Hoeger, Bailey and Ward",
                            SubCategoryId = 3
                        },
                        new
                        {
                            Id = 8,
                            Image = "http://www.shanahan.us/facts/root.html",
                            NameAr = "Effertz-Roob",
                            NameEn = "Macejkovic, Hilpert and Kris",
                            SubCategoryId = 10
                        },
                        new
                        {
                            Id = 9,
                            Image = "http://www.shanahanerdman.co.uk/shop/books/form.rsx",
                            NameAr = "Lynch, Schinner and D'Amore",
                            NameEn = "Friesen-Olson",
                            SubCategoryId = 1
                        },
                        new
                        {
                            Id = 10,
                            Image = "http://www.hoppe.name/shop/films/resource.html",
                            NameAr = "Dach-Trantow",
                            NameEn = "Runolfsson Inc and Sons",
                            SubCategoryId = 9
                        });
                });

            modelBuilder.Entity("api.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("api.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Image = "http://www.nicolasschroeder.name/shop/films/applet.jsp",
                            NameAr = "Quo omnis adipisci ipsum et aut totam at impedit voluptatem rerum et.",
                            NameEn = "Blanditiis iure exercitationem sit sunt fuga maxime magnam voluptatem qui enim est."
                        },
                        new
                        {
                            Id = 2,
                            Image = "http://www.lindgorczany.ca/shop/films/page.gem",
                            NameAr = "Impedit unde consequatur voluptatem facere consequatur consequatur ad quos voluptates assumenda deleniti est.",
                            NameEn = "Consequuntur vitae velit rem doloribus qui sint inventore autem."
                        },
                        new
                        {
                            Id = 3,
                            Image = "http://www.davis.info/interviews/resource.lsp",
                            NameAr = "Et sit consectetur magnam et omnis error aut.",
                            NameEn = "Dolorem in est provident quod cupiditate harum ut debitis sit provident accusantium dicta autem."
                        },
                        new
                        {
                            Id = 4,
                            Image = "http://www.gottlieb.info/reviews/resource.lsp",
                            NameAr = "Provident laborum corporis aperiam rerum eaque error rerum molestiae inventore et quidem quo.",
                            NameEn = "Quam voluptates ipsa odit laudantium sed iure aperiam quis voluptatibus nesciunt odit minima."
                        },
                        new
                        {
                            Id = 5,
                            Image = "http://www.bernhard.ca/shop/root.aspx",
                            NameAr = "Provident libero aut voluptatem fugiat quasi nobis repellendus vero dolorem.",
                            NameEn = "Iste voluptatibus aperiam et ea corporis dolores quia omnis qui consequatur."
                        });
                });

            modelBuilder.Entity("api.Models.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CouponCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DiscountValue")
                        .HasColumnType("float");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("TimesUsed")
                        .HasColumnType("int");

                    b.Property<int>("UsageLimit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("api.Models.CouponUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UsedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("UserId");

                    b.ToTable("CouponUsages");
                });

            modelBuilder.Entity("api.Models.ExtraInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ValueAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ExtraInformations");
                });

            modelBuilder.Entity("api.Models.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("DescriptionAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("api.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("AddressId1")
                        .HasColumnType("int");

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("AddressId1");

                    b.HasIndex("CouponId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("api.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("api.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("DescriptionAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DiscountPercentage")
                        .HasColumnType("float");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MinimumOrderQuantity")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Product_Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("TitleAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 9,
                            DescriptionAr = "Et animi hic voluptatem.",
                            DescriptionEn = "Sed quis amet perferendis aut non ea.",
                            DiscountPercentage = 21.0,
                            Images = "[\"http://www.pagacbartoletti.ca/interviews/root.rsx\"]",
                            MinimumOrderQuantity = 4,
                            Price = 72.0,
                            Product_Unit = "unit",
                            Sku = "5094",
                            Stock = 48,
                            TitleAr = "In ex dignissimos illo ea eum debitis esse rerum ipsa quia eum.",
                            TitleEn = "Esse rerum quisquam nihil consectetur voluptas ea magnam aut reprehenderit est."
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 6,
                            DescriptionAr = "Et incidunt assumenda rem adipisci deserunt amet ex.",
                            DescriptionEn = "Rerum quo sit dignissimos odit unde.",
                            DiscountPercentage = 21.0,
                            Images = "[\"http://www.oconnell.uk/catalog/page.rsx\"]",
                            MinimumOrderQuantity = 5,
                            Price = 13.0,
                            Product_Unit = "unit",
                            Sku = "8169",
                            Stock = 168,
                            TitleAr = "Cum est aut officiis sequi quisquam quia similique ad.",
                            TitleEn = "Enim qui voluptatem quo numquam sint non voluptas sed ut voluptatem."
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 10,
                            DescriptionAr = "Quasi qui consequatur aspernatur ipsum minus ad eius.",
                            DescriptionEn = "Harum et maxime temporibus aut molestiae et quae.",
                            DiscountPercentage = 10.0,
                            Images = "[\"http://www.mannstamm.com/reviews/template.res\"]",
                            MinimumOrderQuantity = 1,
                            Price = 5.0,
                            Product_Unit = "unit",
                            Sku = "6822",
                            Stock = 62,
                            TitleAr = "Repellendus sunt dolores eum quasi accusamus at quod perferendis animi necessitatibus quia qui.",
                            TitleEn = "Et error nostrum mollitia numquam voluptatem fuga esse quia doloribus ad voluptatibus atque eligendi."
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 2,
                            DescriptionAr = "Et non magnam nesciunt aut sunt aspernatur.",
                            DescriptionEn = "Ex omnis iure ad sapiente eum repellat placeat.",
                            DiscountPercentage = 18.0,
                            Images = "[\"http://www.rath.name/shop/form.lsp\"]",
                            MinimumOrderQuantity = 5,
                            Price = 89.0,
                            Product_Unit = "unit",
                            Sku = "5469",
                            Stock = 145,
                            TitleAr = "Nostrum et et suscipit at qui praesentium doloremque numquam sit est at.",
                            TitleEn = "Error totam neque sed et nulla molestiae est doloribus et sit et."
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 8,
                            DescriptionAr = "Id aut minima consectetur.",
                            DescriptionEn = "Dolorum vero quas libero similique aliquid.",
                            DiscountPercentage = 22.0,
                            Images = "[\"http://www.carroll.info/home/resource.asp\"]",
                            MinimumOrderQuantity = 2,
                            Price = 77.0,
                            Product_Unit = "unit",
                            Sku = "2686",
                            Stock = 33,
                            TitleAr = "Ratione ut et sint sunt aspernatur alias nisi quos ex quidem.",
                            TitleEn = "Cupiditate officiis voluptates quaerat fugiat ad necessitatibus error voluptate quibusdam."
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 6,
                            DescriptionAr = "Voluptas quaerat sint consequatur.",
                            DescriptionEn = "Doloremque praesentium dolorum molestiae nulla dolorem debitis dolorum sint voluptates.",
                            DiscountPercentage = 6.0,
                            Images = "[\"http://www.marquardtlittel.info/articles/index.html\"]",
                            MinimumOrderQuantity = 3,
                            Price = 13.0,
                            Product_Unit = "unit",
                            Sku = "5227",
                            Stock = 178,
                            TitleAr = "Aut beatae voluptas eveniet ipsum incidunt nesciunt vero sint.",
                            TitleEn = "Veniam explicabo aspernatur veritatis natus neque molestiae cumque veritatis quaerat nulla qui nobis est."
                        },
                        new
                        {
                            Id = 7,
                            BrandId = 1,
                            DescriptionAr = "Sunt soluta voluptas blanditiis quidem aperiam vel at commodi.",
                            DescriptionEn = "Laboriosam consequuntur quo dicta rem fugit officiis nostrum.",
                            DiscountPercentage = 13.0,
                            Images = "[\"http://www.von.name/catalog/page.jsp\"]",
                            MinimumOrderQuantity = 5,
                            Price = 6.0,
                            Product_Unit = "unit",
                            Sku = "7396",
                            Stock = 169,
                            TitleAr = "Ratione at tenetur possimus repudiandae aperiam aperiam officia et officiis sit.",
                            TitleEn = "Consectetur nostrum assumenda quis dolor sed et ut est dolores deserunt sint quam in."
                        },
                        new
                        {
                            Id = 8,
                            BrandId = 5,
                            DescriptionAr = "Praesentium commodi qui numquam non.",
                            DescriptionEn = "Molestiae eos quam laudantium dolor non ea.",
                            DiscountPercentage = 9.0,
                            Images = "[\"http://www.robelokon.info/interviews/applet.aspx\"]",
                            MinimumOrderQuantity = 3,
                            Price = 39.0,
                            Product_Unit = "unit",
                            Sku = "6724",
                            Stock = 76,
                            TitleAr = "Et eum veritatis assumenda labore sint sit suscipit.",
                            TitleEn = "Eveniet doloremque quia exercitationem et rem et inventore nihil ea qui."
                        },
                        new
                        {
                            Id = 9,
                            BrandId = 2,
                            DescriptionAr = "Quos delectus delectus molestiae tenetur.",
                            DescriptionEn = "Esse ad et cupiditate vel sed quis voluptas et.",
                            DiscountPercentage = 28.0,
                            Images = "[\"http://www.rippin.biz/interviews/template.asp\"]",
                            MinimumOrderQuantity = 5,
                            Price = 63.0,
                            Product_Unit = "unit",
                            Sku = "3906",
                            Stock = 67,
                            TitleAr = "Repellendus quis occaecati voluptas autem optio voluptate harum laborum.",
                            TitleEn = "Iste illo nostrum odit iusto nisi earum neque."
                        },
                        new
                        {
                            Id = 10,
                            BrandId = 5,
                            DescriptionAr = "Eum voluptatem labore fugiat qui ea.",
                            DescriptionEn = "Error sint in tempora reprehenderit fugit distinctio ut iusto libero.",
                            DiscountPercentage = 6.0,
                            Images = "[\"http://www.kuhnromaguera.ca/interviews/applet.asp\"]",
                            MinimumOrderQuantity = 1,
                            Price = 48.0,
                            Product_Unit = "unit",
                            Sku = "2350",
                            Stock = 72,
                            TitleAr = "Blanditiis nam dolor fuga voluptatem corrupti sapiente iste consequatur maxime ab.",
                            TitleEn = "Dolores eaque voluptatem sit error autem culpa atque illum."
                        },
                        new
                        {
                            Id = 11,
                            BrandId = 4,
                            DescriptionAr = "Voluptatibus est adipisci non molestiae consequatur tenetur.",
                            DescriptionEn = "Eum ea neque delectus in.",
                            DiscountPercentage = 20.0,
                            Images = "[\"http://www.kautzermertz.uk/shop/books/template.rsx\"]",
                            MinimumOrderQuantity = 5,
                            Price = 93.0,
                            Product_Unit = "unit",
                            Sku = "7738",
                            Stock = 88,
                            TitleAr = "Commodi nihil cupiditate exercitationem aut natus et ipsum est inventore eaque illum.",
                            TitleEn = "Earum qui suscipit assumenda aut sint voluptatem placeat et eum ut amet qui."
                        },
                        new
                        {
                            Id = 12,
                            BrandId = 4,
                            DescriptionAr = "Quod nam ipsam beatae eos quam dolores et assumenda.",
                            DescriptionEn = "Maxime id ea nobis atque non.",
                            DiscountPercentage = 22.0,
                            Images = "[\"http://www.reynoldsblick.info/shop/films/page.gem\"]",
                            MinimumOrderQuantity = 5,
                            Price = 5.0,
                            Product_Unit = "unit",
                            Sku = "7173",
                            Stock = 18,
                            TitleAr = "Amet harum optio quisquam non vitae minus aut molestiae qui aspernatur non laboriosam eaque.",
                            TitleEn = "Velit ab enim at harum ipsum rerum consectetur sed dignissimos quae asperiores omnis."
                        },
                        new
                        {
                            Id = 13,
                            BrandId = 5,
                            DescriptionAr = "Molestias perferendis corrupti esse voluptatem nam suscipit illo aspernatur.",
                            DescriptionEn = "Omnis laboriosam quis est in tempora dolor sunt maiores odit.",
                            DiscountPercentage = 9.0,
                            Images = "[\"http://www.monahan.ca/shop/food/form.rsx\"]",
                            MinimumOrderQuantity = 3,
                            Price = 48.0,
                            Product_Unit = "unit",
                            Sku = "5027",
                            Stock = 181,
                            TitleAr = "Facere veniam excepturi et reprehenderit quaerat mollitia facilis dicta natus et.",
                            TitleEn = "Aut quasi nisi perferendis aut qui placeat minus incidunt ratione porro dignissimos sit dolor."
                        },
                        new
                        {
                            Id = 14,
                            BrandId = 1,
                            DescriptionAr = "Autem est sapiente sunt non quos.",
                            DescriptionEn = "Velit nam voluptas architecto.",
                            DiscountPercentage = 17.0,
                            Images = "[\"http://www.rempel.uk/home/form.html\"]",
                            MinimumOrderQuantity = 3,
                            Price = 12.0,
                            Product_Unit = "unit",
                            Sku = "6791",
                            Stock = 51,
                            TitleAr = "Tenetur quasi hic a in dignissimos animi minima repellat iste molestiae doloribus tempora ex.",
                            TitleEn = "Nemo nam nam architecto suscipit iusto expedita dolor fuga provident."
                        },
                        new
                        {
                            Id = 15,
                            BrandId = 9,
                            DescriptionAr = "Et aut quaerat architecto molestiae qui consequuntur illum iure corporis.",
                            DescriptionEn = "Velit nostrum excepturi enim voluptas ut occaecati recusandae saepe.",
                            DiscountPercentage = 24.0,
                            Images = "[\"http://www.schultzbednar.ca/shop/food/index.htm\"]",
                            MinimumOrderQuantity = 2,
                            Price = 96.0,
                            Product_Unit = "unit",
                            Sku = "7670",
                            Stock = 192,
                            TitleAr = "Excepturi aperiam sed quia eius eum voluptatem aut ad autem doloremque quae quae cupiditate.",
                            TitleEn = "Perferendis ut et aut nisi ut nobis eos culpa alias voluptas."
                        },
                        new
                        {
                            Id = 16,
                            BrandId = 4,
                            DescriptionAr = "Accusantium quaerat nam hic quasi reiciendis quasi dicta earum dolores.",
                            DescriptionEn = "Ab suscipit explicabo id quo saepe et enim natus vel.",
                            DiscountPercentage = 11.0,
                            Images = "[\"http://www.oharagrimes.name/articles/resource.rsx\"]",
                            MinimumOrderQuantity = 2,
                            Price = 72.0,
                            Product_Unit = "unit",
                            Sku = "6274",
                            Stock = 29,
                            TitleAr = "Earum iure quo dolor saepe eum sapiente et qui et voluptatum molestias delectus.",
                            TitleEn = "A consequatur tempore dolores ipsa eum reiciendis voluptatem."
                        },
                        new
                        {
                            Id = 17,
                            BrandId = 5,
                            DescriptionAr = "Dolorem harum aspernatur dolorum.",
                            DescriptionEn = "Architecto consequatur numquam voluptatem est velit animi occaecati velit.",
                            DiscountPercentage = 9.0,
                            Images = "[\"http://www.gutkowskimills.info/shop/food/root.aspx\"]",
                            MinimumOrderQuantity = 1,
                            Price = 99.0,
                            Product_Unit = "unit",
                            Sku = "7158",
                            Stock = 176,
                            TitleAr = "Eos ad in voluptatum officiis eos maxime dolor consectetur rerum.",
                            TitleEn = "Nesciunt aliquid doloremque asperiores aspernatur non deserunt dolorem."
                        },
                        new
                        {
                            Id = 18,
                            BrandId = 7,
                            DescriptionAr = "Consequatur optio et alias molestiae autem tempore impedit adipisci.",
                            DescriptionEn = "Error ab delectus non quibusdam doloremque omnis nostrum quis porro.",
                            DiscountPercentage = 26.0,
                            Images = "[\"http://www.mueller.com/shop/films/template.gem\"]",
                            MinimumOrderQuantity = 4,
                            Price = 74.0,
                            Product_Unit = "unit",
                            Sku = "4586",
                            Stock = 85,
                            TitleAr = "Perferendis voluptatem reiciendis blanditiis velit exercitationem et corrupti quaerat.",
                            TitleEn = "Incidunt quos laboriosam deleniti soluta quos accusamus ut aut voluptatibus temporibus error ex nihil."
                        },
                        new
                        {
                            Id = 19,
                            BrandId = 10,
                            DescriptionAr = "Vero temporibus molestiae sint omnis est doloremque quod ullam sequi.",
                            DescriptionEn = "Tempora animi suscipit beatae suscipit delectus est ex.",
                            DiscountPercentage = 8.0,
                            Images = "[\"http://www.emard.com/catalog/applet.res\"]",
                            MinimumOrderQuantity = 2,
                            Price = 26.0,
                            Product_Unit = "unit",
                            Sku = "7565",
                            Stock = 129,
                            TitleAr = "Et id distinctio earum modi pariatur quae explicabo.",
                            TitleEn = "Numquam explicabo voluptatibus harum non esse nulla fugit consequatur autem."
                        },
                        new
                        {
                            Id = 20,
                            BrandId = 1,
                            DescriptionAr = "Soluta qui hic inventore error est blanditiis maxime omnis.",
                            DescriptionEn = "Repellendus tempora veniam optio eaque excepturi aut sunt dolore debitis.",
                            DiscountPercentage = 26.0,
                            Images = "[\"http://www.lakin.biz/shop/books/index.res\"]",
                            MinimumOrderQuantity = 3,
                            Price = 16.0,
                            Product_Unit = "unit",
                            Sku = "2192",
                            Stock = 59,
                            TitleAr = "Unde maxime accusantium et totam voluptates facilis nisi et quos labore iure.",
                            TitleEn = "Repellat magnam dolor voluptas corrupti quia in cupiditate incidunt expedita."
                        });
                });

            modelBuilder.Entity("api.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("api.Models.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            Image = "http://www.prosacco.name/shop/template.gem",
                            NameAr = "At et deserunt ut omnis cum illum natus eos nemo consequatur.",
                            NameEn = "Id et exercitationem qui nam eveniet nam iure vel dolores atque quasi ut."
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Image = "http://www.oberbrunner.co.uk/shop/food/template.asp",
                            NameAr = "Quaerat eveniet et quibusdam quibusdam sit eos beatae est iusto commodi aliquam eum quia.",
                            NameEn = "Voluptatem sit corrupti corrupti alias beatae commodi quia voluptate quae ad libero eaque."
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Image = "http://www.heaney.us/guide/resource.jsp",
                            NameAr = "Nam quidem dolorum aut incidunt soluta a consectetur beatae quibusdam incidunt aut nam.",
                            NameEn = "Accusantium culpa ut eos et aperiam quaerat velit ipsam accusantium pariatur praesentium quod."
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 5,
                            Image = "http://www.beattypouros.biz/shop/books/page.lsp",
                            NameAr = "Voluptatibus quisquam dicta aspernatur fuga tenetur est nihil sed iure.",
                            NameEn = "Natus quibusdam est officiis cum dignissimos corrupti a ab dolore."
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Image = "http://www.kilback.uk/films/template.res",
                            NameAr = "Molestiae alias voluptatem dolore incidunt maxime perferendis quo sit consequatur iste.",
                            NameEn = "Vel nobis eum recusandae quidem fugit doloribus modi dolorem quia quis."
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 5,
                            Image = "http://www.hansen.us/guide/resource.asp",
                            NameAr = "Ut enim eos ad perspiciatis repellendus sint error voluptatum.",
                            NameEn = "Dolorem a qui qui et est quibusdam porro rerum ut esse in."
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 5,
                            Image = "http://www.thompson.us/shop/films/root.rsx",
                            NameAr = "Ut magni dolor qui aut pariatur sapiente aut rerum animi tempore aut.",
                            NameEn = "Asperiores reiciendis ea rerum voluptatem et temporibus quo laboriosam impedit dolorum qui."
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 6,
                            Image = "http://www.ratkeblanda.us/home/index.jsp",
                            NameAr = "Corporis sint est dolores sint alias magni iure quisquam ut quis praesentium eveniet doloribus.",
                            NameEn = "Quae in voluptas repellat nihil porro perspiciatis repudiandae."
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            Image = "http://www.parisiandickens.ca/shop/food/page.jsp",
                            NameAr = "Adipisci est nisi non quo omnis quam deleniti at.",
                            NameEn = "Reiciendis qui aspernatur omnis ut sapiente earum distinctio perspiciatis quisquam aut rerum aliquam."
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 4,
                            Image = "http://www.spencer.name/articles/form.asp",
                            NameAr = "Tempore autem at dignissimos necessitatibus fugit illum laboriosam quas.",
                            NameEn = "Nisi fuga ipsum quia rerum tempore animi rerum quia nesciunt ipsa eum vel."
                        });
                });

            modelBuilder.Entity("api.Models.Wishlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Wishlists");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("api.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("api.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("api.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.Address", b =>
                {
                    b.HasOne("api.Models.AppUser", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.Brand", b =>
                {
                    b.HasOne("api.Models.SubCategory", "SubCategory")
                        .WithMany("Brands")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("api.Models.Cart", b =>
                {
                    b.HasOne("api.Models.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.AppUser", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.CouponUsage", b =>
                {
                    b.HasOne("api.Models.Coupon", "Coupon")
                        .WithMany("CouponUsages")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.AppUser", "User")
                        .WithMany("CouponUsages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.ExtraInformation", b =>
                {
                    b.HasOne("api.Models.Product", "Product")
                        .WithMany("Informations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("api.Models.Order", b =>
                {
                    b.HasOne("api.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Address", null)
                        .WithMany("Orders")
                        .HasForeignKey("AddressId1");

                    b.HasOne("api.Models.Coupon", "Coupon")
                        .WithMany()
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("api.Models.AppUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Coupon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.OrderItem", b =>
                {
                    b.HasOne("api.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("api.Models.Product", b =>
                {
                    b.HasOne("api.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("api.Models.Review", b =>
                {
                    b.HasOne("api.Models.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.AppUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.SubCategory", b =>
                {
                    b.HasOne("api.Models.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("api.Models.Wishlist", b =>
                {
                    b.HasOne("api.Models.Product", "Product")
                        .WithMany("Wishlists")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.AppUser", "User")
                        .WithMany("Wishlists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.Address", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("api.Models.AppUser", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Carts");

                    b.Navigation("CouponUsages");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("Wishlists");
                });

            modelBuilder.Entity("api.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("api.Models.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("api.Models.Coupon", b =>
                {
                    b.Navigation("CouponUsages");
                });

            modelBuilder.Entity("api.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("api.Models.Product", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Informations");

                    b.Navigation("OrderItems");

                    b.Navigation("Reviews");

                    b.Navigation("Wishlists");
                });

            modelBuilder.Entity("api.Models.SubCategory", b =>
                {
                    b.Navigation("Brands");
                });
#pragma warning restore 612, 618
        }
    }
}
